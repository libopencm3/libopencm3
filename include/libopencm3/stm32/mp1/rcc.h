/** @defgroup rcc_defines RCC Defines
@brief <b>Defined Constants and Types for the STM32MP1xx Reset and Clock
Control</b>
@ingroup STM32MP1xx_defines
@version 1.0.0
LGPL License Terms @ref lgpl_license
 */
/*
 * This file is part of the libopencm3 project.
 *
 * Copyright (C) 2019 Brian Viele <vielster@allocor.tech>
 *
 * This library is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library.  If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef LIBOPENCM3_RCC_H
#define LIBOPENCM3_RCC_H

#include <libopencm3/cm3/common.h>
/**@{*/

/** @defgroup rcc_registers Reset and Clock Control Register
@{*/
#define RCC_TZCR       MMIO32(RCC_BASE + 0x000)
#define RCC_OCENSETR   MMIO32(RCC_BASE + 0x00C)
#define RCC_OCENCLRR   MMIO32(RCC_BASE + 0x010)
#define RCC_HSICFGR    MMIO32(RCC_BASE + 0x018)
#define RCC_CSICFGR    MMIO32(RCC_BASE + 0x01c)
#define RCC_MPCKSELR   MMIO32(RCC_BASE + 0x020)
#define RCC_ASSCKSELR  MMIO32(RCC_BASE + 0x024)
#define RCC_RCK12SELR  MMIO32(RCC_BASE + 0x028)
#define RCC_MPCKDIVR   MMIO32(RCC_BASE + 0x02c)
#define RCC_AXIDIVR    MMIO32(RCC_BASE + 0x030)
#define RCC_APB4DIVR   MMIO32(RCC_BASE + 0x03c)
#define RCC_APB5DIVR   MMIO32(RCC_BASE + 0x040)
#define RCC_RTCDIVR    MMIO32(RCC_BASE + 0x044)
#define RCC_MSSCKSELR  MMIO32(RCC_BASE + 0x048)

#define RCC_PLLxCR(pll_base)     MMIO32(pll_base + 0x00)
#define RCC_PLLxCFGR1(pll_base)  MMIO32(pll_base + 0x04)
#define RCC_PLLxCFGR2(pll_base)  MMIO32(pll_base + 0x08)
#define RCC_PLLxFRACR(pll_base)  MMIO32(pll_base + 0x0c)
#define RCC_PLLxCSGR(pll_base)   MMIO32(pll_base + 0x10)

#define RCC_PLL1_BASE  (RCC_BASE + 0x080)
#define RCC_PLL1CR     RCC_PLLxCR(RCC_PLL1_BASE)
#define RCC_PLL1CFGR1  RCC_PLLxCFGR1(RCC_PLL1_BASE)
#define RCC_PLL1CFGR2  RCC_PLLxCFGR2(RCC_PLL1_BASE)
#define RCC_PLL1FRACR  RCC_PLLxFRACR(RCC_PLL1_BASE)
#define RCC_PLL1CSGR   RCC_PLLxCSGR(RCC_PLL1_BASE)

#define RCC_PLL2_BASE  (RCC_BASE + 0x094)
#define RCC_PLL2CR     RCC_PLLxCR(RCC_PLL2_BASE)
#define RCC_PLL2CFGR1  RCC_PLLxCFGR1(RCC_PLL2_BASE)
#define RCC_PLL2CFGR2  RCC_PLLxCFGR2(RCC_PLL2_BASE)
#define RCC_PLL2FRACR  RCC_PLLxFRACR(RCC_PLL2_BASE)
#define RCC_PLL2CSGR   RCC_PLLxCSGR(RCC_PLL2_BASE)

#define RCC_I2C46CKSELR     MMIO32(RCC_BASE + 0x0c0)
#define RCC_SPI6CKSELR      MMIO32(RCC_BASE + 0x0c4)
#define RCC_UART1CKSELR     MMIO32(RCC_BASE + 0x0c8)
#define RCC_RNG1CKSELR      MMIO32(RCC_BASE + 0x0cc)
#define RCC_CPERCKSELR      MMIO32(RCC_BASE + 0x0d0)
#define RCC_STGENCKSELR     MMIO32(RCC_BASE + 0x0d4)
#define RCC_DDRITFCR        MMIO32(RCC_BASE + 0x0d8)
#define RCC_MP_BOOTCR       MMIO32(RCC_BASE + 0x100)
#define RCC_MP_SREQSETR     MMIO32(RCC_BASE + 0x104)
#define RCC_MP_SREQCLRR     MMIO32(RCC_BASE + 0x108)
#define RCC_MP_GCR          MMIO32(RCC_BASE + 0x10c)
#define RCC_MP_APRSTCR      MMIO32(RCC_BASE + 0x110)
#define RCC_MP_APRSTSR      MMIO32(RCC_BASE + 0x110)
#define RCC_BDCR            MMIO32(RCC_BASE + 0x140)
#define RCC_RDLSICR         MMIO32(RCC_BASE + 0x144)

#define RCC_APB4RSTSETR_OFFSET 0x180
#define RCC_APB4RSTSETR        MMIO32(RCC_BASE + RCC_APB4RSTSETR_OFFSET)
#define RCC_APB4RSTCLRR_OFFSET 0x184
#define RCC_APB4RSTCLRR        MMIO32(RCC_BASE + RCC_APB4RSTCLRR_OFFSET)
#define RCC_APB5RSTSETR_OFFSET 0x188
#define RCC_APB5RSTSETR        MMIO32(RCC_BASE + RCC_APB5RSTSETR_OFFSET)
#define RCC_APB5RSTCLRR_OFFSET 0x18c
#define RCC_APB5RSTCLRR        MMIO32(RCC_BASE + RCC_APB5RSTCLRR_OFFSET)
#define RCC_AHB5RSTSETR_OFFSET 0x190
#define RCC_AHB5RSTSETR        MMIO32(RCC_BASE + RCC_AHB5RSTSETR_OFFSET)
#define RCC_AHB5RSTCLRR_OFFSET 0x194
#define RCC_AHB5RSTCLRR        MMIO32(RCC_BASE + RCC_AHB5RSTCLRR_OFFSET)
#define RCC_AHB6RSTSETR_OFFSET 0x198
#define RCC_AHB6RSTSETR        MMIO32(RCC_BASE + RCC_AHB6RSTSETR_OFFSET)
#define RCC_AHB6RSTCLRR_OFFSET 0x19c
#define RCC_AHB6RSTCLRR        MMIO32(RCC_BASE + RCC_AHB6RSTCLRR_OFFSET)
#define RCC_TZAHB6RSTSETR_OFFSET 0x1a0
#define RCC_TZAHB6RSTSETR        MMIO32(RCC_BASE + RCC_TZAHB6RSTSETR_OFFSET)
#define RCC_TZAHB6RSTCLRR_OFFSET 0x1a4
#define RCC_TZAHB6RSTCLRR        MMIO32(RCC_BASE + RCC_TZAHB6RSTCLRR_OFFSET)

#define RCC_MP_APB4ENSETR_OFFSET   0x200
#define RCC_MP_APB4ENSETR          MMIO32(RCC_BASE + RCC_MP_APB4ENSETR_OFFSET)
#define RCC_MP_APB4ENCLRR_OFFSET   0x204
#define RCC_MP_APB4ENCLRR          MMIO32(RCC_BASE + RCC_MP_APB4ENCLRR_OFFSET)
#define RCC_MP_APB5ENSETR_OFFSET   0x208
#define RCC_MP_APB5ENSETR          MMIO32(RCC_BASE + RCC_MP_APB5ENSETR_OFFSET)
#define RCC_MP_APB5ENCLRR_OFFSET   0x20c
#define RCC_MP_APB5ENCLRR          MMIO32(RCC_BASE + RCC_MP_APB5ENCLRR_OFFSET)
#define RCC_MP_AHB5ENSETR_OFFSET   0x210
#define RCC_MP_AHB5ENSETR          MMIO32(RCC_BASE + RCC_MP_AHB5ENSETR_OFFSET)
#define RCC_MP_AHB5ENCLRR_OFFSET   0x214
#define RCC_MP_AHB5ENCLRR          MMIO32(RCC_BASE + RCC_MP_AHB5ENCLRR_OFFSET)
#define RCC_MP_AHB6ENSETR_OFFSET   0x218
#define RCC_MP_AHB6ENSETR          MMIO32(RCC_BASE + RCC_MP_AHB6ENSETR_OFFSET)
#define RCC_MP_AHB6ENCLRR_OFFSET   0x21c
#define RCC_MP_AHB6ENCLRR          MMIO32(RCC_BASE + RCC_MP_AHB6ENCLRR_OFFSET)
#define RCC_MP_TZAHB6ENSETR_OFFSET 0x220
#define RCC_MP_TZAHB6ENSETR        MMIO32(RCC_BASE + RCC_MP_TZAHB6ENSETR_OFFSET)
#define RCC_MP_TZAHB6ENCLRR_OFFSET 0x224
#define RCC_MP_TZAHB6ENCLRR        MMIO32(RCC_BASE + RCC_MP_TZAHB6ENCLRR_OFFSET)
#define RCC_MC_APB4ENSETR_OFFSET   0x280
#define RCC_MC_APB4ENSETR          MMIO32(RCC_BASE + RCC_MC_APB4ENSETR_OFFSET)
#define RCC_MC_APB4ENCLRR_OFFSET   0x284
#define RCC_MC_APB4ENCLRR          MMIO32(RCC_BASE + RCC_MC_APB4ENCLRR_OFFSET)
#define RCC_MC_APB5ENSETR_OFFSET   0x288
#define RCC_MC_APB5ENSETR          MMIO32(RCC_BASE + RCC_MC_APB5ENSETR_OFFSET)
#define RCC_MC_APB5ENCLRR_OFFSET   0x28c
#define RCC_MC_APB5ENCLRR          MMIO32(RCC_BASE + RCC_MC_APB5ENCLRR_OFFSET)
#define RCC_MC_AHB5ENSETR_OFFSET   0x290
#define RCC_MC_AHB5ENSETR          MMIO32(RCC_BASE + RCC_MC_AHB5ENSETR_OFFSET)
#define RCC_MC_AHB5ENCLRR_OFFSET   0x294
#define RCC_MC_AHB5ENCLRR          MMIO32(RCC_BASE + RCC_MC_AHB5ENCLRR_OFFSET)
#define RCC_MC_AHB6ENSETR_OFFSET   0x298
#define RCC_MC_AHB6ENSETR          MMIO32(RCC_BASE + RCC_MC_AHB6ENSETR_OFFSET)
#define RCC_MC_AHB6ENCLRR_OFFSET   0x29c
#define RCC_MC_AHB6ENCLRR          MMIO32(RCC_BASE + RCC_MC_AHB6ENCLRR_OFFSET)

#define RCC_MP_APB4LPENSETR_OFFSET     0x300
#define RCC_MP_APB4LPENSETR            MMIO32(RCC_BASE + RCC_MP_APB5ENSETR_OFFSET)
#define RCC_MP_APB4LPENCLRR_OFFSET     0x304
#define RCC_MP_APB4LPENCLRR            MMIO32(RCC_BASE + RCC_MP_APB5ENCLRR_OFFSET)
#define RCC_MP_APB5LPENSETR_OFFSET     0x308
#define RCC_MP_APB5LPENSETR            MMIO32(RCC_BASE + RCC_MP_APB5ENSETR_OFFSET)
#define RCC_MP_APB5LPENCLRR_OFFSET     0x30c
#define RCC_MP_APB5LPENCLRR            MMIO32(RCC_BASE + RCC_MP_APB5ENCLRR_OFFSET)
#define RCC_MP_AHB5LPENSETR_OFFSET     0x310
#define RCC_MP_AHB5LPENSETR            MMIO32(RCC_BASE + RCC_MP_APB5ENSETR_OFFSET)
#define RCC_MP_AHB5LPENCLRR_OFFSET     0x314
#define RCC_MP_AHB5LPENCLRR            MMIO32(RCC_BASE + RCC_MP_APB5ENCLRR_OFFSET)
#define RCC_MP_AHB6LPENSETR_OFFSET     0x318
#define RCC_MP_AHB6LPENSETR            MMIO32(RCC_BASE + RCC_MP_APB5ENSETR_OFFSET)
#define RCC_MP_AHB6LPENCLRR_OFFSET     0x31c
#define RCC_MP_AHB6LPENCLRR            MMIO32(RCC_BASE + RCC_MP_APB5ENCLRR_OFFSET)
#define RCC_MP_TZAHB6LPENSETR_OFFSET   0x320
#define RCC_MP_TZAHB6LPENSETR          MMIO32(RCC_BASE + RCC_MP_APB5ENSETR_OFFSET)
#define RCC_MP_TZAHB6LPENCLRR_OFFSET   0x324
#define RCC_MP_TZAHB6LPENCLRR          MMIO32(RCC_BASE + RCC_MP_APB5ENCLRR_OFFSET)
#define RCC_MC_APB4LPENSETR_OFFSET     0x380
#define RCC_MC_APB4LPENSETR            MMIO32(RCC_BASE + RCC_MC_APB5ENSETR_OFFSET)
#define RCC_MC_APB4LPENCLRR_OFFSET     0x384
#define RCC_MC_APB4LPENCLRR            MMIO32(RCC_BASE + RCC_MC_APB5ENCLRR_OFFSET)
#define RCC_MC_APB5LPENSETR_OFFSET     0x388
#define RCC_MC_APB5LPENSETR            MMIO32(RCC_BASE + RCC_MC_APB5ENSETR_OFFSET)
#define RCC_MC_APB5LPENCLRR_OFFSET     0x38c
#define RCC_MC_APB5LPENCLRR            MMIO32(RCC_BASE + RCC_MC_APB5ENCLRR_OFFSET)
#define RCC_MC_AHB5LPENSETR_OFFSET     0x390
#define RCC_MC_AHB5LPENSETR            MMIO32(RCC_BASE + RCC_MC_APB5ENSETR_OFFSET)
#define RCC_MC_AHB5LPENCLRR_OFFSET     0x394
#define RCC_MC_AHB5LPENCLRR            MMIO32(RCC_BASE + RCC_MC_APB5ENCLRR_OFFSET)
#define RCC_MC_AHB6LPENSETR_OFFSET     0x398
#define RCC_MC_AHB6LPENSETR            MMIO32(RCC_BASE + RCC_MC_APB5ENSETR_OFFSET)
#define RCC_MC_AHB6LPENCLRR_OFFSET     0x39c
#define RCC_MC_AHB6LPENCLRR            MMIO32(RCC_BASE + RCC_MC_APB5ENCLRR_OFFSET)

#define RCC_BR_RSTCLRR        MMIO32(RCC_BASE + 0x400)
#define RCC_MB_GRSTCSETR      MMIO32(RCC_BASE + 0x404)
#define RCC_MP_RSTSR          MMIO32(RCC_BASE + 0x408)
#define RCC_MP_IWDGFZSETR     MMIO32(RCC_BASE + 0x40c)
#define RCC_MP_IWDGFZCLRR     MMIO32(RCC_BASE + 0x410)
#define RCC_MP_CIER           MMIO32(RCC_BASE + 0x414)
#define RCC_MP_CIFR           MMIO32(RCC_BASE + 0x418)
#define RCC_PWRLPDLYCR        MMIO32(RCC_BASE + 0x41c)
#define RCC_MP_RSTSSETR       MMIO32(RCC_BASE + 0x420)

#define RCC_MCO1CFGR       MMIO32(RCC_BASE + 0x800)
#define RCC_MCO2CFGR       MMIO32(RCC_BASE + 0x804)
#define RCC_OCRDYR         MMIO32(RCC_BASE + 0x808)
#define RCC_DBGCFGR        MMIO32(RCC_BASE + 0x80c)
#define RCC_RCK3SELR       MMIO32(RCC_BASE + 0x820)
#define RCC_RCK4SELR       MMIO32(RCC_BASE + 0x824)
#define RCC_TIMG1PRER      MMIO32(RCC_BASE + 0x828)
#define RCC_TIMG2PRER      MMIO32(RCC_BASE + 0x82c)
#define RCC_MCUDIVR        MMIO32(RCC_BASE + 0x830)
#define RCC_APB1DIVR       MMIO32(RCC_BASE + 0x834)
#define RCC_APB2DIVR       MMIO32(RCC_BASE + 0x838)
#define RCC_APB3DIVR       MMIO32(RCC_BASE + 0x83c)

#define RCC_PLL3_BASE  (RCC_BASE + 0x880)
#define RCC_PLL3CR     RCC_PLLxCR(RCC_PLL3_BASE)
#define RCC_PLL3CFGR1  RCC_PLLxCFGR1(RCC_PLL3_BASE)
#define RCC_PLL3CFGR2  RCC_PLLxCFGR2(RCC_PLL3_BASE)
#define RCC_PLL3FRACR  RCC_PLLxFRACR(RCC_PLL3_BASE)

#define RCC_PLL4_BASE  (RCC_BASE + 0x894)
#define RCC_PLL4CR     RCC_PLLxCR(RCC_PLL4_BASE)
#define RCC_PLL4CFGR1  RCC_PLLxCFGR1(RCC_PLL4_BASE)
#define RCC_PLL4CFGR2  RCC_PLLxCFGR2(RCC_PLL4_BASE)
#define RCC_PLL4FRACR  RCC_PLLxFRACR(RCC_PLL4_BASE)

#define RCC_I2C12CKSELR       MMIO32(RCC_BASE + 0x8c0)
#define RCC_I2C35CKSELR       MMIO32(RCC_BASE + 0x8c4)
#define RCC_SAI1CKSELR        MMIO32(RCC_BASE + 0x8c8)
#define RCC_SAI2CKSELR        MMIO32(RCC_BASE + 0x8cc)
#define RCC_SAI3CKSELR        MMIO32(RCC_BASE + 0x8d0)
#define RCC_SAI4CKSELR        MMIO32(RCC_BASE + 0x8d4)
#define RCC_SPI2S1CKSELR      MMIO32(RCC_BASE + 0x8d8)
#define RCC_SPI2S23CKSELR     MMIO32(RCC_BASE + 0x8dc)
#define RCC_SPI45CKSELR       MMIO32(RCC_BASE + 0x8e0)
#define RCC_UART6CKSELR       MMIO32(RCC_BASE + 0x8e4)
#define RCC_UART24CKSELR      MMIO32(RCC_BASE + 0x8e8)
#define RCC_UART35CKSELR      MMIO32(RCC_BASE + 0x8ec)
#define RCC_UART78CKSELR      MMIO32(RCC_BASE + 0x8f0)
#define RCC_SDMMC12CKSELR     MMIO32(RCC_BASE + 0x8f4)
#define RCC_SDMMC3CKSELR      MMIO32(RCC_BASE + 0x8f8)
#define RCC_ETHCKSELR         MMIO32(RCC_BASE + 0x8fc)
#define RCC_QSPICKSELR        MMIO32(RCC_BASE + 0x900)
#define RCC_FMCCKSELR         MMIO32(RCC_BASE + 0x904)
#define RCC_FDCANCKSELR       MMIO32(RCC_BASE + 0x90c)
#define RCC_SPDIFCKSELR       MMIO32(RCC_BASE + 0x914)
#define RCC_CECCKSELR         MMIO32(RCC_BASE + 0x918)
#define RCC_USBCKSELR         MMIO32(RCC_BASE + 0x91c)
#define RCC_RNG2CKSELR        MMIO32(RCC_BASE + 0x920)
#define RCC_DSICKSELR         MMIO32(RCC_BASE + 0x924)
#define RCC_ADCCKSELR         MMIO32(RCC_BASE + 0x928)
#define RCC_LPTIM45CKSELR     MMIO32(RCC_BASE + 0x92c)
#define RCC_LPTIM23CKSELR     MMIO32(RCC_BASE + 0x930)
#define RCC_LPTIM1CKSELR      MMIO32(RCC_BASE + 0x934)

#define RCC_APB1RSTSETR_OFFSET 0x980
#define RCC_APB1RSTSETR        MMIO32(RCC_BASE + RCC_APB1RSTSETR_OFFSET)
#define RCC_APB1RSTCLRR_OFFSET 0x984
#define RCC_APB1RSTCLRR        MMIO32(RCC_BASE + RCC_APB1RSTCLRR_OFFSET)
#define RCC_APB2RSTSETR_OFFSET 0x988
#define RCC_APB2RSTSETR        MMIO32(RCC_BASE + RCC_APB2RSTSETR_OFFSET)
#define RCC_APB2RSTCLRR_OFFSET 0x98c
#define RCC_APB2RSTCLRR        MMIO32(RCC_BASE + RCC_APB2RSTCLRR_OFFSET)
#define RCC_APB3RSTSETR_OFFSET 0x990
#define RCC_APB3RSTSETR        MMIO32(RCC_BASE + RCC_APB3RSTSETR_OFFSET)
#define RCC_APB3RSTCLRR_OFFSET 0x994
#define RCC_APB3RSTCLRR        MMIO32(RCC_BASE + RCC_APB3RSTCLRR_OFFSET)
#define RCC_AHB2RSTSETR_OFFSET 0x998
#define RCC_AHB2RSTSETR        MMIO32(RCC_BASE + RCC_AHB2RSTSETR_OFFSET)
#define RCC_AHB2RSTCLRR_OFFSET 0x99c
#define RCC_AHB2RSTCLRR        MMIO32(RCC_BASE + RCC_AHB2RSTCLRR_OFFSET)
#define RCC_AHB3RSTSETR_OFFSET 0x9a0
#define RCC_AHB3RSTSETR        MMIO32(RCC_BASE + RCC_AHB3RSTSETR_OFFSET)
#define RCC_AHB3RSTCLRR_OFFSET 0x9a4
#define RCC_AHB3RSTCLRR        MMIO32(RCC_BASE + RCC_AHB3RSTCLRR_OFFSET)
#define RCC_AHB4RSTSETR_OFFSET 0x9a8
#define RCC_AHB4RSTSETR        MMIO32(RCC_BASE + RCC_AHB4RSTSETR_OFFSET)
#define RCC_AHB4RSTCLRR_OFFSET 0x9ac
#define RCC_AHB4RSTCLRR        MMIO32(RCC_BASE + RCC_AHB4RSTCLRR_OFFSET)

#define RCC_MP_APB1ENSETR_OFFSET 0xa00
#define RCC_MP_APB1ENSETR        MMIO32(RCC_BASE + RCC_MP_APB1ENSETR_OFFSET)
#define RCC_MP_APB1ENCLRR_OFFSET 0xa04
#define RCC_MP_APB1ENCLRR        MMIO32(RCC_BASE + RCC_MP_APB1ENCLRR_OFFSET)
#define RCC_MP_APB2ENSETR_OFFSET 0xa08
#define RCC_MP_APB2ENSETR        MMIO32(RCC_BASE + RCC_MP_APB2ENSETR_OFFSET)
#define RCC_MP_APB2ENCLRR_OFFSET 0xa0c
#define RCC_MP_APB2ENCLRR        MMIO32(RCC_BASE + RCC_MP_APB2ENCLRR_OFFSET)
#define RCC_MP_APB3ENSETR_OFFSET 0xa10
#define RCC_MP_APB3ENSETR        MMIO32(RCC_BASE + RCC_MP_APB3ENSETR_OFFSET)
#define RCC_MP_APB3ENCLRR_OFFSET 0xa14
#define RCC_MP_APB3ENCLRR        MMIO32(RCC_BASE + RCC_MP_APB3ENCLRR_OFFSET)
#define RCC_MP_AHB2ENSETR_OFFSET 0xa18
#define RCC_MP_AHB2ENSETR        MMIO32(RCC_BASE + RCC_MP_AHB2ENSETR_OFFSET)
#define RCC_MP_AHB2ENCLRR_OFFSET 0xa1c
#define RCC_MP_AHB2ENCLRR        MMIO32(RCC_BASE + RCC_MP_AHB2ENCLRR_OFFSET)
#define RCC_MP_AHB3ENSETR_OFFSET 0xa20
#define RCC_MP_AHB3ENSETR        MMIO32(RCC_BASE + RCC_MP_AHB3ENSETR_OFFSET)
#define RCC_MP_AHB3ENCLRR_OFFSET 0xa24
#define RCC_MP_AHB3ENCLRR        MMIO32(RCC_BASE + RCC_MP_AHB3ENCLRR_OFFSET)
#define RCC_MP_AHB4ENSETR_OFFSET 0xa28
#define RCC_MP_AHB4ENSETR        MMIO32(RCC_BASE + RCC_MP_AHB4ENSETR_OFFSET)
#define RCC_MP_AHB4ENCLRR_OFFSET 0xa2c
#define RCC_MP_AHB4ENCLRR        MMIO32(RCC_BASE + RCC_MP_AHB4ENCLRR_OFFSET)

#define RCC_MP_MLAHBENSETR_OFFSET 0xa38
#define RCC_MP_MLAHBENSETR        MMIO32(RCC_BASE + RCC_MP_MLAHBENSETR_OFFSET)
#define RCC_MP_MLAHBENCLRR_OFFSET 0xa3c
#define RCC_MP_MLAHBENCLRR        MMIO32(RCC_BASE + RCC_MP_MLAHBENCLRR_OFFSET)

#define RCC_MC_APB1ENSETR_OFFSET  0xa80
#define RCC_MC_APB1ENSETR         MMIO32(RCC_BASE + RCC_MC_APB1ENSETR_OFFSET)
#define RCC_MC_APB1ENCLRR_OFFSET  0xa84
#define RCC_MC_APB1ENCLRR         MMIO32(RCC_BASE + RCC_MC_APB1ENCLRR_OFFSET)
#define RCC_MC_APB2ENSETR_OFFSET  0xa88
#define RCC_MC_APB2ENSETR         MMIO32(RCC_BASE + RCC_MC_APB2ENSETR_OFFSET)
#define RCC_MC_APB2ENCLRR_OFFSET  0xa8c
#define RCC_MC_APB2ENCLRR         MMIO32(RCC_BASE + RCC_MC_APB2ENCLRR_OFFSET)
#define RCC_MC_APB3ENSETR_OFFSET  0xa90
#define RCC_MC_APB3ENSETR         MMIO32(RCC_BASE + RCC_MC_APB3ENSETR_OFFSET)
#define RCC_MC_APB3ENCLRR_OFFSET  0xa94
#define RCC_MC_APB3ENCLRR         MMIO32(RCC_BASE + RCC_MC_APB3ENCLRR_OFFSET)
#define RCC_MC_AHB2ENSETR_OFFSET  0xa98
#define RCC_MC_AHB2ENSETR         MMIO32(RCC_BASE + RCC_MC_AHB2ENSETR_OFFSET)
#define RCC_MC_AHB2ENCLRR_OFFSET  0xa9c
#define RCC_MC_AHB2ENCLRR         MMIO32(RCC_BASE + RCC_MC_AHB2ENCLRR_OFFSET)
#define RCC_MC_AHB3ENSETR_OFFSET  0xaa0
#define RCC_MC_AHB3ENSETR         MMIO32(RCC_BASE + RCC_MC_AHB3ENSETR_OFFSET)
#define RCC_MC_AHB3ENCLRR_OFFSET  0xaa4
#define RCC_MC_AHB3ENCLRR         MMIO32(RCC_BASE + RCC_MC_AHB3ENCLRR_OFFSET)
#define RCC_MC_AHB4ENSETR_OFFSET  0xaa8
#define RCC_MC_AHB4ENSETR         MMIO32(RCC_BASE + RCC_MC_AHB4ENSETR_OFFSET)
#define RCC_MC_AHB4ENCLRR_OFFSET  0xaac
#define RCC_MC_AHB4ENCLRR         MMIO32(RCC_BASE + RCC_MC_AHB4ENCLRR_OFFSET)
#define RCC_MC_AXIMENSETR_OFFSET  0xab0
#define RCC_MC_AXIMENSETR         MMIO32(RCC_BASE + RCC_MC_AXIMENSETR_OFFSET)
#define RCC_MC_AXIMENCLRR_OFFSET  0xab4
#define RCC_MC_AXIMENCLRR         MMIO32(RCC_BASE + RCC_MC_AXIMENCLRR_OFFSET)
#define RCC_MC_MLAHBENSETR_OFFSET 0xab8
#define RCC_MC_MLAHBENSETR        MMIO32(RCC_BASE + RCC_MC_MLAHBENSETR_OFFSET)
#define RCC_MC_MLAHBENCLRR_OFFSET 0xabc
#define RCC_MC_MLAHBENCLRR        MMIO32(RCC_BASE + RCC_MC_MLAHBENCLRR_OFFSET)

#define RCC_MP_APB1LPENSETR_OFFSET  0xb00
#define RCC_MP_APB1LPENSETR         MMIO32(RCC_BASE + RCC_MP_APB1LPENSETR_OFFSET)
#define RCC_MP_APB1LPENCLRR_OFFSET  0xb04
#define RCC_MP_APB1LPENCLRR         MMIO32(RCC_BASE + RCC_MP_APB1LPENCLRR_OFFSET)
#define RCC_MP_APB2LPENSETR_OFFSET  0xb08
#define RCC_MP_APB2LPENSETR         MMIO32(RCC_BASE + RCC_MP_APB2LPENSETR_OFFSET)
#define RCC_MP_APB2LPENCLRR_OFFSET  0xb0c
#define RCC_MP_APB2LPENCLRR         MMIO32(RCC_BASE + RCC_MP_APB2LPENCLRR_OFFSET)
#define RCC_MP_APB3LPENSETR_OFFSET  0xb10
#define RCC_MP_APB3LPENSETR         MMIO32(RCC_BASE + RCC_MP_APB3LPENSETR_OFFSET)
#define RCC_MP_APB3LPENCLRR_OFFSET  0xb14
#define RCC_MP_APB3LPENCLRR         MMIO32(RCC_BASE + RCC_MP_APB3LPENCLRR_OFFSET)
#define RCC_MP_AHB2LPENSETR_OFFSET  0xb18
#define RCC_MP_AHB2LPENSETR         MMIO32(RCC_BASE + RCC_MP_AHB2LPENSETR_OFFSET)
#define RCC_MP_AHB2LPENCLRR_OFFSET  0xb1c
#define RCC_MP_AHB2LPENCLRR         MMIO32(RCC_BASE + RCC_MP_AHB2LPENCLRR_OFFSET)
#define RCC_MP_AHB3LPENSETR_OFFSET  0xb20
#define RCC_MP_AHB3LPENSETR         MMIO32(RCC_BASE + RCC_MP_AHB3LPENSETR_OFFSET)
#define RCC_MP_AHB3LPENCLRR_OFFSET  0xb24
#define RCC_MP_AHB3LPENCLRR         MMIO32(RCC_BASE + RCC_MP_AHB3LPENCLRR_OFFSET)
#define RCC_MP_AHB4LPENSETR_OFFSET  0xb28
#define RCC_MP_AHB4LPENSETR         MMIO32(RCC_BASE + RCC_MP_AHB4LPENSETR_OFFSET)
#define RCC_MP_AHB4LPENCLRR_OFFSET  0xb2c
#define RCC_MP_AHB4LPENCLRR         MMIO32(RCC_BASE + RCC_MP_AHB4LPENCLRR_OFFSET)
#define RCC_MP_AXIMLPENSETR_OFFSET  0xb30
#define RCC_MP_AXIMLPENSETR         MMIO32(RCC_BASE + RCC_MP_AXIMLPENSETR_OFFSET)
#define RCC_MP_AXIMLPENCLRR_OFFSET  0xb34
#define RCC_MP_AXIMLPENCLRR         MMIO32(RCC_BASE + RCC_MP_AXIMLPENCLRR_OFFSET)
#define RCC_MP_MLAHBLPENSETR_OFFSET 0xb38
#define RCC_MP_MLAHBLPENSETR        MMIO32(RCC_BASE + RCC_MP_MLAHBLPENSETR_OFFSET)
#define RCC_MP_MLAHBLPENCLRR_OFFSET 0xb3c
#define RCC_MP_MLAHBLPENCLRR        MMIO32(RCC_BASE + RCC_MP_MLAHBLPENCLRR_OFFSET)

#define RCC_MC_APB1LPENSETR_OFFSET  0xb80
#define RCC_MC_APB1LPENSETR         MMIO32(RCC_BASE + RCC_MC_APB1LPENSETR_OFFSET)
#define RCC_MC_APB1LPENCLRR_OFFSET  0xb84
#define RCC_MC_APB1LPENCLRR         MMIO32(RCC_BASE + RCC_MC_APB1LPENCLRR_OFFSET)
#define RCC_MC_APB2LPENSETR_OFFSET  0xb88
#define RCC_MC_APB2LPENSETR         MMIO32(RCC_BASE + RCC_MC_APB2LPENSETR_OFFSET)
#define RCC_MC_APB2LPENCLRR_OFFSET  0xb8c
#define RCC_MC_APB2LPENCLRR         MMIO32(RCC_BASE + RCC_MC_APB2LPENCLRR_OFFSET)
#define RCC_MC_APB3LPENSETR_OFFSET  0xb90
#define RCC_MC_APB3LPENSETR         MMIO32(RCC_BASE + RCC_MC_APB3LPENSETR_OFFSET)
#define RCC_MC_APB3LPENCLRR_OFFSET  0xb94
#define RCC_MC_APB3LPENCLRR         MMIO32(RCC_BASE + RCC_MC_APB3LPENCLRR_OFFSET)
#define RCC_MC_AHB2LPENSETR_OFFSET  0xb98
#define RCC_MC_AHB2LPENSETR         MMIO32(RCC_BASE + RCC_MC_AHB2LPENSETR_OFFSET)
#define RCC_MC_AHB2LPENCLRR_OFFSET  0xb9c
#define RCC_MC_AHB2LPENCLRR         MMIO32(RCC_BASE + RCC_MC_AHB2LPENCLRR_OFFSET)
#define RCC_MC_AHB3LPENSETR_OFFSET  0xba0
#define RCC_MC_AHB3LPENSETR         MMIO32(RCC_BASE + RCC_MC_AHB3LPENSETR_OFFSET)
#define RCC_MC_AHB3LPENCLRR_OFFSET  0xba4
#define RCC_MC_AHB3LPENCLRR         MMIO32(RCC_BASE + RCC_MC_AHB3LPENCLRR_OFFSET)
#define RCC_MC_AHB4LPENSETR_OFFSET  0xba8
#define RCC_MC_AHB4LPENSETR         MMIO32(RCC_BASE + RCC_MC_AHB4LPENSETR_OFFSET)
#define RCC_MC_AHB4LPENCLRR_OFFSET  0xbac
#define RCC_MC_AHB4LPENCLRR         MMIO32(RCC_BASE + RCC_MC_AHB4LPENCLRR_OFFSET)
#define RCC_MC_AXIMLPENSETR_OFFSET  0xbb0
#define RCC_MC_AXIMLPENSETR         MMIO32(RCC_BASE + RCC_MC_AXIMLPENSETR_OFFSET)
#define RCC_MC_AXIMLPENCLRR_OFFSET  0xbb4
#define RCC_MC_AXIMLPENCLRR         MMIO32(RCC_BASE + RCC_MC_AXIMLPENCLRR_OFFSET)
#define RCC_MC_MLAHBLPENSETR_OFFSET 0xbb8
#define RCC_MC_MLAHBLPENSETR        MMIO32(RCC_BASE + RCC_MC_MLAHBLPENSETR_OFFSET)
#define RCC_MC_MLAHBLPENCLRR_OFFSET 0xbbc
#define RCC_MC_MLAHBLPENCLRR        MMIO32(RCC_BASE + RCC_MC_MLAHBLPENCLRR_OFFSET)

#define RCC_MC_RSTSCLRR        MMIO32(RCC_BASE + 0xc00)
#define RCC_MC_CIER            MMIO32(RCC_BASE + 0xc14)
#define RCC_MC_CIFR            MMIO32(RCC_BASE + 0xc14)
#define RCC_VERR               MMIO32(RCC_BASE + 0xFF4)
#define RCC_IDR                MMIO32(RCC_BASE + 0xFF8)
#define RCC_SIDR               MMIO32(RCC_BASE + 0xFFC)
/**@}*/

/** @defgroup rcc_ocrdyr_values RCC_OCRDYR Values
 * @ingroup rcc_registers
@{*/
#define RCC_OCRDYR_HSIRDY    BIT0
#define RCC_OCRDYR_HSIDIVRDY BIT2
#define RCC_OCRDYR_CSIRDY    BIT4
#define RCC_OCRDYR_HSERDY    BIT4
#define RCC_OCRDYR_MPUCKRDY  BIT23
#define RCC_OCRDYR_AXICKRDY  BIT24
#define RCC_OCRDYR_CKREST    BIT25
/**@}*/

/** @defgroup rcc_bdcr_values RCC_BDCR Values
 * @ingroup rcc_registers
@{*/
#define RCC_BDCR_LSEON           BIT0
#define RCC_BDCR_LSEBYP          BIT1
#define RCC_BDCR_LSERDY          BIT2
#define RCC_BDCR_DIGBYP          BIT3
#define RCC_BDCR_LSEDRV_SHIFT    4
#define RCC_BDCR_LSEDRV_MASK     (0x03)
#define RCC_BDCR_LSEDRV_LOW      0
#define RCC_BDCR_LSEDRV_MEDLOW   1
#define RCC_BDCR_LSEDRV_MEDHIGH  2
#define RCC_BDCR_LSEDRV_HIGH     3
#define RCC_BDCR_LSECSSON        BIT8
#define RCC_BDCR_LSECSSD         BIT9
#define RCC_BDCR_RTCSRC_SHIFT    16
#define RCC_BDCR_RTCSRC_MASK     (0x03)
#define RCC_BDCR_RTCSRC_NOCLK    0
#define RCC_BDCR_RTCSRC_LSE      1
#define RCC_BDCR_RTCSRC_LSI      2
#define RCC_BDCR_RTCSRC_HSE      3
#define RCC_BDCR_RTCCKEN         BIT20
#define RCC_BDCR_VSWRST          BIT31
/**@}*/

/** @defgroup rcc_rdlsicr_values RCC_RDLSICR Values
 * @ingroup rcc_registers
@{*/
#define RCC_RDLSICR_LSION       BIT0
#define RCC_RDLSICR_LSIRDY      BIT1
#define RCC_RDLSICR_MRD_SHIFT   16
#define RCC_RDLSICR_MRD_MASK    (0x1f)
#define RCC_RDLSICR_EADLY_SHIFT 24
#define RCC_RDLSICR_EADLY_MASK  (0x07)
#define RCC_RDLSICR_EADLY_10MS  0
#define RCC_RDLSICR_EADLY_NONE  1
#define RCC_RDLSICR_EADLY_100US 2
#define RCC_RDLSICR_EADLY_200US 3
#define RCC_RDLSICR_EADLY_500US 4
#define RCC_RDLSICR_EADLY_1MS   5
#define RCC_RDLSICR_EADLY_2MS   6
#define RCC_RDLSICR_EADLY_5MS   7
/**@}*/

/** @defgroup rcc_pllxcr_values RCC_PLLxCR Values
 * @ingroup rcc_registers
@{*/
#define RCC_PLLCR_PLLON     BIT0
#define RCC_PLLCR_PLLRDY    BIT1
#define RCC_PLLCR_SSCG_CTRL BIT2 /* Available only in PLL1 and PLL2 */
#define RCC_PLLCR_DIVPEN    BIT4
#define RCC_PLLCR_DIVQEN    BIT5
#define RCC_PLLCR_DIVREN    BIT6
/**@}*/

/** @defgroup rcc_uart35ckselr_values RCC_UART35CKSELR Values
 * @ingroup rcc_registers
@{*/
#define RCC_UART35CKSELR_UART35SRC_SHIFT 0
#define RCC_UART35CKSELR_UART35SRC_MASK  (0x07)
#define RCC_UART35CKSELR_UART35SRC_PCLK1  0
#define RCC_UART35CKSELR_UART35SRC_PLL4_Q 1
#define RCC_UART35CKSELR_UART35SRC_HSI    2
#define RCC_UART35CKSELR_UART35SRC_CSI    3
#define RCC_UART35CKSELR_UART35SRC_HSE    4
/**@}*/

/** @defgroup rcc_hsicfgr_values RCC_HSICFGR Values
 * @ingroup rcc_registers
@{*/
#define RCC_HSICFGR_HSIDIV_SHIFT 0
#define RCC_HSICFGR_HSIDIV_MASK  (0x03)
#define RCC_HSICFGR_HSIDIV_64MHZ 0
#define RCC_HSICFGR_HSIDIV_32MHZ 1
#define RCC_HSICFGR_HSIDIV_16MHZ 2
#define RCC_HSICFGR_HSIDIV_8MHZ  3
#define RCC_HSICFGR_HSITRIM_SHIFT 8
#define RCC_HSICFGR_HSITRIM_MASK  (0x7f)
#define RCC_HSICFGR_HSICAL_SHIFT 16
#define RCC_HSICFGR_HSICAL_MASK  (0x3ff)
/**@}*/

/** @defgroup rcc_spi45ckselr_values RCC_SPI45CKSELR Values
 * @ingroup rcc_registers
@{*/
#define RCCSPI45CKSELR_SPI45SRC_MASK    0x7
#define RCCSPI45CKSELR_SPI45SRC_SHIFT   0
#define RCCSPI45CKSELR_SPI45SRC_PCLK2   0
#define RCCSPI45CKSELR_SPI45SRC_PLL4_Q  1
#define RCCSPI45CKSELR_SPI45SRC_HSI     2
#define RCCSPI45CKSELR_SPI45SRC_CSI     3
#define RCCSPI45CKSELR_SPI45SRC_HSE     4
/**@}*/

extern uint32_t rcc_apb1_frequency;
extern uint32_t rcc_apb2_frequency;

enum rcc_osc {
	RCC_PLL1,
	RCC_PLL2,
	RCC_PLL3,
	RCC_PLL4,
	RCC_HSE,
	RCC_HSI,
	RCC_LSE,
	RCC_LSI,
	RCC_CSI,
};

#define RCC_OFFSET_MASK 0xFFF
#define RCC_BASE_LEN    12
#define RCC_BIT_POS_LEN 5
#define RCC_BIT_POS_MASK 0x1F
#define _REG_BIT(base, bit, clr_base, clr_pol) \
        ((((base) & RCC_OFFSET_MASK) << RCC_BIT_POS_LEN) \
         + ((bit) & 0x1F) \
         + (((clr_base) & RCC_OFFSET_MASK) << (RCC_BASE_LEN + RCC_BIT_POS_LEN)) \
         + (((clr_pol) & 0x1) << (2*RCC_BASE_LEN + RCC_BIT_POS_LEN)))
enum rcc_periph_clken {
	/* APB1 peripherals */
	RCC_TIM2   = _REG_BIT(RCC_MC_APB1ENSETR_OFFSET, 0, RCC_MC_APB1ENCLRR_OFFSET, 1),
	RCC_TIM3   = _REG_BIT(RCC_MC_APB1ENSETR_OFFSET, 1, RCC_MC_APB1ENCLRR_OFFSET, 1),
	RCC_TIM4   = _REG_BIT(RCC_MC_APB1ENSETR_OFFSET, 2, RCC_MC_APB1ENCLRR_OFFSET, 1),
	RCC_TIM5   = _REG_BIT(RCC_MC_APB1ENSETR_OFFSET, 3, RCC_MC_APB1ENCLRR_OFFSET, 1),
	RCC_TIM6   = _REG_BIT(RCC_MC_APB1ENSETR_OFFSET, 4, RCC_MC_APB1ENCLRR_OFFSET, 1),
	RCC_TIM7   = _REG_BIT(RCC_MC_APB1ENSETR_OFFSET, 5, RCC_MC_APB1ENCLRR_OFFSET, 1),
	RCC_TIM12  = _REG_BIT(RCC_MC_APB1ENSETR_OFFSET, 6, RCC_MC_APB1ENCLRR_OFFSET, 1),
	RCC_TIM13  = _REG_BIT(RCC_MC_APB1ENSETR_OFFSET, 7, RCC_MC_APB1ENCLRR_OFFSET, 1),
	RCC_TIM14  = _REG_BIT(RCC_MC_APB1ENSETR_OFFSET, 8, RCC_MC_APB1ENCLRR_OFFSET, 1),
	RCC_LPTIM1 = _REG_BIT(RCC_MC_APB1ENSETR_OFFSET, 9, RCC_MC_APB1ENCLRR_OFFSET, 1),
	RCC_SPI2   = _REG_BIT(RCC_MC_APB1ENSETR_OFFSET, 11, RCC_MC_APB1ENCLRR_OFFSET, 1),
	RCC_SPI3   = _REG_BIT(RCC_MC_APB1ENSETR_OFFSET, 12, RCC_MC_APB1ENCLRR_OFFSET, 1),
	RCC_USART2 = _REG_BIT(RCC_MC_APB1ENSETR_OFFSET, 14, RCC_MC_APB1ENCLRR_OFFSET, 1),
	RCC_USART3 = _REG_BIT(RCC_MC_APB1ENSETR_OFFSET, 15, RCC_MC_APB1ENCLRR_OFFSET, 1),
	RCC_UART4  = _REG_BIT(RCC_MC_APB1ENSETR_OFFSET, 16, RCC_MC_APB1ENCLRR_OFFSET, 1),
	RCC_UART5  = _REG_BIT(RCC_MC_APB1ENSETR_OFFSET, 17, RCC_MC_APB1ENCLRR_OFFSET, 1),
	RCC_UART7  = _REG_BIT(RCC_MC_APB1ENSETR_OFFSET, 18, RCC_MC_APB1ENCLRR_OFFSET, 1),
	RCC_UART8  = _REG_BIT(RCC_MC_APB1ENSETR_OFFSET, 19, RCC_MC_APB1ENCLRR_OFFSET, 1),
	RCC_I2C1   = _REG_BIT(RCC_MC_APB1ENSETR_OFFSET, 21, RCC_MC_APB1ENCLRR_OFFSET, 1),
	RCC_I2C2   = _REG_BIT(RCC_MC_APB1ENSETR_OFFSET, 22, RCC_MC_APB1ENCLRR_OFFSET, 1),
	RCC_I2C3   = _REG_BIT(RCC_MC_APB1ENSETR_OFFSET, 23, RCC_MC_APB1ENCLRR_OFFSET, 1),
	RCC_I2C5   = _REG_BIT(RCC_MC_APB1ENSETR_OFFSET, 24, RCC_MC_APB1ENCLRR_OFFSET, 1),
	RCC_SPDIF  = _REG_BIT(RCC_MC_APB1ENSETR_OFFSET, 26, RCC_MC_APB1ENCLRR_OFFSET, 1),
	RCC_CEC    = _REG_BIT(RCC_MC_APB1ENSETR_OFFSET, 27, RCC_MC_APB1ENCLRR_OFFSET, 1),
	RCC_DAC    = _REG_BIT(RCC_MC_APB1ENSETR_OFFSET, 29, RCC_MC_APB1ENCLRR_OFFSET, 1),
	RCC_MDIOS  = _REG_BIT(RCC_MC_APB1ENSETR_OFFSET, 31, RCC_MC_APB1ENCLRR_OFFSET, 1),

	/* APB2 peripherals */
	RCC_TIM1    = _REG_BIT(RCC_MC_APB2ENSETR_OFFSET, 0, RCC_MC_APB2ENCLRR_OFFSET, 1),
	RCC_TIM8    = _REG_BIT(RCC_MC_APB2ENSETR_OFFSET, 1, RCC_MC_APB2ENCLRR_OFFSET, 1),
	RCC_TIM15   = _REG_BIT(RCC_MC_APB2ENSETR_OFFSET, 2, RCC_MC_APB2ENCLRR_OFFSET, 1),
	RCC_TIM16   = _REG_BIT(RCC_MC_APB2ENSETR_OFFSET, 3, RCC_MC_APB2ENCLRR_OFFSET, 1),
	RCC_TIM17   = _REG_BIT(RCC_MC_APB2ENSETR_OFFSET, 4, RCC_MC_APB2ENCLRR_OFFSET, 1),
	RCC_SPI1    = _REG_BIT(RCC_MC_APB2ENSETR_OFFSET, 8, RCC_MC_APB2ENCLRR_OFFSET, 1),
	RCC_SPI4    = _REG_BIT(RCC_MC_APB2ENSETR_OFFSET, 9, RCC_MC_APB2ENCLRR_OFFSET, 1),
	RCC_SPI5    = _REG_BIT(RCC_MC_APB2ENSETR_OFFSET, 10, RCC_MC_APB2ENCLRR_OFFSET, 1),
	RCC_USART6  = _REG_BIT(RCC_MC_APB2ENSETR_OFFSET, 13, RCC_MC_APB2ENCLRR_OFFSET, 1),
	RCC_SAI1    = _REG_BIT(RCC_MC_APB2ENSETR_OFFSET, 16, RCC_MC_APB2ENCLRR_OFFSET, 1),
	RCC_SAI2    = _REG_BIT(RCC_MC_APB2ENSETR_OFFSET, 17, RCC_MC_APB2ENCLRR_OFFSET, 1),
	RCC_SAI3    = _REG_BIT(RCC_MC_APB2ENSETR_OFFSET, 18, RCC_MC_APB2ENCLRR_OFFSET, 1),
	RCC_DFSDM   = _REG_BIT(RCC_MC_APB2ENSETR_OFFSET, 20, RCC_MC_APB2ENCLRR_OFFSET, 1),
	RCC_ADDFSDM = _REG_BIT(RCC_MC_APB2ENSETR_OFFSET, 21, RCC_MC_APB2ENCLRR_OFFSET, 1),
	RCC_FDCAN   = _REG_BIT(RCC_MC_APB2ENSETR_OFFSET, 24, RCC_MC_APB2ENCLRR_OFFSET, 1),

	/* APB3 peripherals */
	RCC_LPTIM2 = _REG_BIT(RCC_MC_APB3ENSETR_OFFSET, 0, RCC_MC_APB3ENCLRR_OFFSET, 1),
	RCC_LPTIM3 = _REG_BIT(RCC_MC_APB3ENSETR_OFFSET, 1, RCC_MC_APB3ENCLRR_OFFSET, 1),
	RCC_LPTIM4 = _REG_BIT(RCC_MC_APB3ENSETR_OFFSET, 2, RCC_MC_APB3ENCLRR_OFFSET, 1),
	RCC_LPTIM5 = _REG_BIT(RCC_MC_APB3ENSETR_OFFSET, 3, RCC_MC_APB3ENCLRR_OFFSET, 1),
	RCC_SAI4   = _REG_BIT(RCC_MC_APB3ENSETR_OFFSET, 8, RCC_MC_APB3ENCLRR_OFFSET, 1),
	RCC_SYSCFG = _REG_BIT(RCC_MC_APB3ENSETR_OFFSET, 11, RCC_MC_APB3ENCLRR_OFFSET, 1),
	RCC_VREF   = _REG_BIT(RCC_MC_APB3ENSETR_OFFSET, 13, RCC_MC_APB3ENCLRR_OFFSET, 1),
	RCC_DTS    = _REG_BIT(RCC_MC_APB3ENSETR_OFFSET, 16, RCC_MC_APB3ENCLRR_OFFSET, 1),
	RCC_HDP    = _REG_BIT(RCC_MC_APB3ENSETR_OFFSET, 20, RCC_MC_APB3ENCLRR_OFFSET, 1),

	/* APB4 peripherals */
	RCC_LTDC     = _REG_BIT(RCC_MC_APB4ENSETR_OFFSET, 0, RCC_MC_APB4ENCLRR_OFFSET, 1),
	RCC_DSI      = _REG_BIT(RCC_MC_APB4ENSETR_OFFSET, 4, RCC_MC_APB4ENCLRR_OFFSET, 1),
	RCC_DDRPERFM = _REG_BIT(RCC_MC_APB4ENSETR_OFFSET, 8, RCC_MC_APB4ENCLRR_OFFSET, 1),
	RCC_USBPHY   = _REG_BIT(RCC_MC_APB4ENSETR_OFFSET, 16, RCC_MC_APB4ENCLRR_OFFSET, 1),
	RCC_STGENRO  = _REG_BIT(RCC_MC_APB4ENSETR_OFFSET, 20, RCC_MC_APB4ENCLRR_OFFSET, 1),

	/* APB5 peripherals */
	RCC_SPI6   = _REG_BIT(RCC_MC_APB5ENSETR_OFFSET, 0, RCC_MC_APB5ENCLRR_OFFSET, 1),
	RCC_I2C4   = _REG_BIT(RCC_MC_APB5ENSETR_OFFSET, 2, RCC_MC_APB5ENCLRR_OFFSET, 1),
	RCC_I2C6   = _REG_BIT(RCC_MC_APB5ENSETR_OFFSET, 3, RCC_MC_APB5ENCLRR_OFFSET, 1),
	RCC_USART1 = _REG_BIT(RCC_MC_APB5ENSETR_OFFSET, 4, RCC_MC_APB5ENCLRR_OFFSET, 1),
	RCC_RTCAPB = _REG_BIT(RCC_MC_APB5ENSETR_OFFSET, 8, RCC_MC_APB5ENCLRR_OFFSET, 1),
	RCC_TZC1   = _REG_BIT(RCC_MC_APB5ENSETR_OFFSET, 11, RCC_MC_APB5ENCLRR_OFFSET, 1),
	RCC_TZC2   = _REG_BIT(RCC_MC_APB5ENSETR_OFFSET, 12, RCC_MC_APB5ENCLRR_OFFSET, 1),
	RCC_TZP    = _REG_BIT(RCC_MC_APB5ENSETR_OFFSET, 13, RCC_MC_APB5ENCLRR_OFFSET, 1),
	RCC_BSEC   = _REG_BIT(RCC_MC_APB5ENSETR_OFFSET, 16, RCC_MC_APB5ENCLRR_OFFSET, 1),
	RCC_STGEN  = _REG_BIT(RCC_MC_APB5ENSETR_OFFSET, 20, RCC_MC_APB5ENCLRR_OFFSET, 1),

	/* AHB5 peripherals */
	RCC_GPIOZ   = _REG_BIT(RCC_MC_AHB5ENSETR_OFFSET, 0, RCC_MC_AHB5ENCLRR_OFFSET, 1),
	RCC_CRYP1   = _REG_BIT(RCC_MC_AHB5ENSETR_OFFSET, 4, RCC_MC_AHB5ENCLRR_OFFSET, 1),
	RCC_HASH1   = _REG_BIT(RCC_MC_AHB5ENSETR_OFFSET, 5, RCC_MC_AHB5ENCLRR_OFFSET, 1),
	RCC_RNG1    = _REG_BIT(RCC_MC_AHB5ENSETR_OFFSET, 6, RCC_MC_AHB5ENCLRR_OFFSET, 1),
	RCC_BKPSRAM = _REG_BIT(RCC_MC_AHB5ENSETR_OFFSET, 8, RCC_MC_AHB5ENCLRR_OFFSET, 1),

	/* AHB6 peripherals */
	RCC_MDMA   = _REG_BIT(RCC_MC_AHB6ENSETR_OFFSET, 0,  RCC_MC_AHB6ENCLRR_OFFSET, 1),
	RCC_GPU    = _REG_BIT(RCC_MC_AHB6ENSETR_OFFSET, 5,  RCC_MC_AHB6ENCLRR_OFFSET, 1),
	RCC_ETHCK  = _REG_BIT(RCC_MC_AHB6ENSETR_OFFSET, 7,  RCC_MC_AHB6ENCLRR_OFFSET, 1),
	RCC_ETHTX  = _REG_BIT(RCC_MC_AHB6ENSETR_OFFSET, 8,  RCC_MC_AHB6ENCLRR_OFFSET, 1),
	RCC_ETHRX  = _REG_BIT(RCC_MC_AHB6ENSETR_OFFSET, 9,  RCC_MC_AHB6ENCLRR_OFFSET, 1),
	RCC_ETHMAC = _REG_BIT(RCC_MC_AHB6ENSETR_OFFSET, 10, RCC_MC_AHB6ENCLRR_OFFSET, 1),
	RCC_FMC    = _REG_BIT(RCC_MC_AHB6ENSETR_OFFSET, 12, RCC_MC_AHB6ENCLRR_OFFSET, 1),
	RCC_QSPI   = _REG_BIT(RCC_MC_AHB6ENSETR_OFFSET, 14, RCC_MC_AHB6ENCLRR_OFFSET, 1),
	RCC_SDMMC1 = _REG_BIT(RCC_MC_AHB6ENSETR_OFFSET, 16, RCC_MC_AHB6ENCLRR_OFFSET, 1),
	RCC_SDMMC2 = _REG_BIT(RCC_MC_AHB6ENSETR_OFFSET, 17, RCC_MC_AHB6ENCLRR_OFFSET, 1),
	RCC_CRC1   = _REG_BIT(RCC_MC_AHB6ENSETR_OFFSET, 20, RCC_MC_AHB6ENCLRR_OFFSET, 1),
	RCC_USBH   = _REG_BIT(RCC_MC_AHB6ENSETR_OFFSET, 24, RCC_MC_AHB6ENCLRR_OFFSET, 1),

	/* AHB2 peripherals */
	RCC_DMA1   = _REG_BIT(RCC_MC_AHB2ENSETR_OFFSET, 0, RCC_MC_AHB2ENCLRR_OFFSET, 1),
	RCC_DMA2   = _REG_BIT(RCC_MC_AHB2ENSETR_OFFSET, 1, RCC_MC_AHB2ENCLRR_OFFSET, 1),
	RCC_DMAMUX = _REG_BIT(RCC_MC_AHB2ENSETR_OFFSET, 2, RCC_MC_AHB2ENCLRR_OFFSET, 1),
	RCC_ADC    = _REG_BIT(RCC_MC_AHB2ENSETR_OFFSET, 5, RCC_MC_AHB2ENCLRR_OFFSET, 1),
	RCC_USBO   = _REG_BIT(RCC_MC_AHB2ENSETR_OFFSET, 8, RCC_MC_AHB2ENCLRR_OFFSET, 1),
	RCC_SDMMC3 = _REG_BIT(RCC_MC_AHB2ENSETR_OFFSET, 16, RCC_MC_AHB2ENCLRR_OFFSET, 1),

	/* AHB3 peripherals */
	RCC_DCMI  = _REG_BIT(RCC_MC_AHB3ENSETR_OFFSET, 0, RCC_MC_AHB3ENCLRR_OFFSET, 1),
	RCC_CRYP2 = _REG_BIT(RCC_MC_AHB3ENSETR_OFFSET, 4, RCC_MC_AHB3ENCLRR_OFFSET, 1),
	RCC_HASH2 = _REG_BIT(RCC_MC_AHB3ENSETR_OFFSET, 5, RCC_MC_AHB3ENCLRR_OFFSET, 1),
	RCC_RNG2  = _REG_BIT(RCC_MC_AHB3ENSETR_OFFSET, 6, RCC_MC_AHB3ENCLRR_OFFSET, 1),
	RCC_CRC2  = _REG_BIT(RCC_MC_AHB3ENSETR_OFFSET, 7, RCC_MC_AHB3ENCLRR_OFFSET, 1),
	RCC_HSEM  = _REG_BIT(RCC_MC_AHB3ENSETR_OFFSET, 11, RCC_MC_AHB3ENCLRR_OFFSET, 1),
	RCC_IPCC  = _REG_BIT(RCC_MC_AHB3ENSETR_OFFSET, 12, RCC_MC_AHB3ENCLRR_OFFSET, 1),

	/* AHB4 peripherals */
	RCC_GPIOA = _REG_BIT(RCC_MC_AHB4ENSETR_OFFSET, 0, RCC_MC_AHB4ENCLRR_OFFSET, 1),
	RCC_GPIOB = _REG_BIT(RCC_MC_AHB4ENSETR_OFFSET, 1, RCC_MC_AHB4ENCLRR_OFFSET, 1),
	RCC_GPIOC = _REG_BIT(RCC_MC_AHB4ENSETR_OFFSET, 2, RCC_MC_AHB4ENCLRR_OFFSET, 1),
	RCC_GPIOD = _REG_BIT(RCC_MC_AHB4ENSETR_OFFSET, 3, RCC_MC_AHB4ENCLRR_OFFSET, 1),
	RCC_GPIOE = _REG_BIT(RCC_MC_AHB4ENSETR_OFFSET, 4, RCC_MC_AHB4ENCLRR_OFFSET, 1),
	RCC_GPIOF = _REG_BIT(RCC_MC_AHB4ENSETR_OFFSET, 5, RCC_MC_AHB4ENCLRR_OFFSET, 1),
	RCC_GPIOG = _REG_BIT(RCC_MC_AHB4ENSETR_OFFSET, 6, RCC_MC_AHB4ENCLRR_OFFSET, 1),
	RCC_GPIOH = _REG_BIT(RCC_MC_AHB4ENSETR_OFFSET, 7, RCC_MC_AHB4ENCLRR_OFFSET, 1),
	RCC_GPIOI = _REG_BIT(RCC_MC_AHB4ENSETR_OFFSET, 8, RCC_MC_AHB4ENCLRR_OFFSET, 1),
	RCC_GPIOJ = _REG_BIT(RCC_MC_AHB4ENSETR_OFFSET, 9, RCC_MC_AHB4ENCLRR_OFFSET, 1),
	RCC_GPIOK = _REG_BIT(RCC_MC_AHB4ENSETR_OFFSET, 10, RCC_MC_AHB4ENCLRR_OFFSET, 1),

	/* AXI peripherals */
	RCC_SYSRAM = _REG_BIT(RCC_MC_AXIMENSETR_OFFSET, 0, RCC_MC_AXIMENCLRR_OFFSET, 1),

	/* ML */
	RCC_RETRAM = _REG_BIT(RCC_MC_MLAHBENSETR_OFFSET, 4, RCC_MC_MLAHBENCLRR_OFFSET, 1),
};

enum rcc_periph_rst {
	/* APB1 peripherals */
	RST_TIM2   = _REG_BIT(RCC_APB1RSTSETR_OFFSET, 0, RCC_APB1RSTCLRR_OFFSET, 1),
	RST_TIM3   = _REG_BIT(RCC_APB1RSTSETR_OFFSET, 1, RCC_APB1RSTCLRR_OFFSET, 1),
	RST_TIM4   = _REG_BIT(RCC_APB1RSTSETR_OFFSET, 2, RCC_APB1RSTCLRR_OFFSET, 1),
	RST_TIM5   = _REG_BIT(RCC_APB1RSTSETR_OFFSET, 3, RCC_APB1RSTCLRR_OFFSET, 1),
	RST_TIM6   = _REG_BIT(RCC_APB1RSTSETR_OFFSET, 4, RCC_APB1RSTCLRR_OFFSET, 1),
	RST_TIM7   = _REG_BIT(RCC_APB1RSTSETR_OFFSET, 5, RCC_APB1RSTCLRR_OFFSET, 1),
	RST_TIM12  = _REG_BIT(RCC_APB1RSTSETR_OFFSET, 6, RCC_APB1RSTCLRR_OFFSET, 1),
	RST_TIM13  = _REG_BIT(RCC_APB1RSTSETR_OFFSET, 7, RCC_APB1RSTCLRR_OFFSET, 1),
	RST_TIM14  = _REG_BIT(RCC_APB1RSTSETR_OFFSET, 8, RCC_APB1RSTCLRR_OFFSET, 1),
	RST_LPTIM1 = _REG_BIT(RCC_APB1RSTSETR_OFFSET, 9, RCC_APB1RSTCLRR_OFFSET, 1),
	RST_SPI2   = _REG_BIT(RCC_APB1RSTSETR_OFFSET, 11, RCC_APB1RSTCLRR_OFFSET, 1),
	RST_SPI3   = _REG_BIT(RCC_APB1RSTSETR_OFFSET, 12, RCC_APB1RSTCLRR_OFFSET, 1),
	RST_USART2 = _REG_BIT(RCC_APB1RSTSETR_OFFSET, 14, RCC_APB1RSTCLRR_OFFSET, 1),
	RST_USART3 = _REG_BIT(RCC_APB1RSTSETR_OFFSET, 15, RCC_APB1RSTCLRR_OFFSET, 1),
	RST_UART4  = _REG_BIT(RCC_APB1RSTSETR_OFFSET, 16, RCC_APB1RSTCLRR_OFFSET, 1),
	RST_UART5  = _REG_BIT(RCC_APB1RSTSETR_OFFSET, 17, RCC_APB1RSTCLRR_OFFSET, 1),
	RST_UART7  = _REG_BIT(RCC_APB1RSTSETR_OFFSET, 18, RCC_APB1RSTCLRR_OFFSET, 1),
	RST_UART8  = _REG_BIT(RCC_APB1RSTSETR_OFFSET, 19, RCC_APB1RSTCLRR_OFFSET, 1),
	RST_I2C1   = _REG_BIT(RCC_APB1RSTSETR_OFFSET, 21, RCC_APB1RSTCLRR_OFFSET, 1),
	RST_I2C2   = _REG_BIT(RCC_APB1RSTSETR_OFFSET, 22, RCC_APB1RSTCLRR_OFFSET, 1),
	RST_I2C3   = _REG_BIT(RCC_APB1RSTSETR_OFFSET, 23, RCC_APB1RSTCLRR_OFFSET, 1),
	RST_I2C5   = _REG_BIT(RCC_APB1RSTSETR_OFFSET, 24, RCC_APB1RSTCLRR_OFFSET, 1),
	RST_SPDIF  = _REG_BIT(RCC_APB1RSTSETR_OFFSET, 26, RCC_APB1RSTCLRR_OFFSET, 1),
	RST_CEC    = _REG_BIT(RCC_APB1RSTSETR_OFFSET, 27, RCC_APB1RSTCLRR_OFFSET, 1),
	RST_DAC    = _REG_BIT(RCC_APB1RSTSETR_OFFSET, 29, RCC_APB1RSTCLRR_OFFSET, 1),
	RST_MDIOS  = _REG_BIT(RCC_APB1RSTSETR_OFFSET, 31, RCC_APB1RSTCLRR_OFFSET, 1),

	/* APB2 peripherals */
	RST_TIM1    = _REG_BIT(RCC_APB2RSTSETR_OFFSET, 0, RCC_APB2RSTCLRR_OFFSET, 1),
	RST_TIM8    = _REG_BIT(RCC_APB2RSTSETR_OFFSET, 1, RCC_APB2RSTCLRR_OFFSET, 1),
	RST_TIM15   = _REG_BIT(RCC_APB2RSTSETR_OFFSET, 2, RCC_APB2RSTCLRR_OFFSET, 1),
	RST_TIM16   = _REG_BIT(RCC_APB2RSTSETR_OFFSET, 3, RCC_APB2RSTCLRR_OFFSET, 1),
	RST_TIM17   = _REG_BIT(RCC_APB2RSTSETR_OFFSET, 4, RCC_APB2RSTCLRR_OFFSET, 1),
	RST_SPI1    = _REG_BIT(RCC_APB2RSTSETR_OFFSET, 8, RCC_APB2RSTCLRR_OFFSET, 1),
	RST_SPI4    = _REG_BIT(RCC_APB2RSTSETR_OFFSET, 9, RCC_APB2RSTCLRR_OFFSET, 1),
	RST_SPI5    = _REG_BIT(RCC_APB2RSTSETR_OFFSET, 10, RCC_APB2RSTCLRR_OFFSET, 1),
	RST_USART6  = _REG_BIT(RCC_APB2RSTSETR_OFFSET, 13, RCC_APB2RSTCLRR_OFFSET, 1),
	RST_SAI1    = _REG_BIT(RCC_APB2RSTSETR_OFFSET, 16, RCC_APB2RSTCLRR_OFFSET, 1),
	RST_SAI2    = _REG_BIT(RCC_APB2RSTSETR_OFFSET, 17, RCC_APB2RSTCLRR_OFFSET, 1),
	RST_SAI3    = _REG_BIT(RCC_APB2RSTSETR_OFFSET, 18, RCC_APB2RSTCLRR_OFFSET, 1),
	RST_DFSDM   = _REG_BIT(RCC_APB2RSTSETR_OFFSET, 20, RCC_APB2RSTCLRR_OFFSET, 1),
	RST_ADDFSDM = _REG_BIT(RCC_APB2RSTSETR_OFFSET, 21, RCC_APB2RSTCLRR_OFFSET, 1),
	RST_FDCAN   = _REG_BIT(RCC_APB2RSTSETR_OFFSET, 24, RCC_APB2RSTCLRR_OFFSET, 1),

	/* APB3 peripherals */
	RST_LPTIM2 = _REG_BIT(RCC_APB3RSTSETR_OFFSET, 0, RCC_APB3RSTCLRR_OFFSET, 1),
	RST_LPTIM3 = _REG_BIT(RCC_APB3RSTSETR_OFFSET, 1, RCC_APB3RSTCLRR_OFFSET, 1),
	RST_LPTIM4 = _REG_BIT(RCC_APB3RSTSETR_OFFSET, 2, RCC_APB3RSTCLRR_OFFSET, 1),
	RST_LPTIM5 = _REG_BIT(RCC_APB3RSTSETR_OFFSET, 3, RCC_APB3RSTCLRR_OFFSET, 1),
	RST_SAI4   = _REG_BIT(RCC_APB3RSTSETR_OFFSET, 8, RCC_APB3RSTCLRR_OFFSET, 1),
	RST_SYSCFG = _REG_BIT(RCC_APB3RSTSETR_OFFSET, 11, RCC_APB3RSTCLRR_OFFSET, 1),
	RST_VREF   = _REG_BIT(RCC_APB3RSTSETR_OFFSET, 13, RCC_APB3RSTCLRR_OFFSET, 1),
	RST_DTS    = _REG_BIT(RCC_APB3RSTSETR_OFFSET, 16, RCC_APB3RSTCLRR_OFFSET, 1),
	RST_HDP    = _REG_BIT(RCC_APB3RSTSETR_OFFSET, 20, RCC_APB3RSTCLRR_OFFSET, 1),

	/* AHB2 peripherals */
	RST_DMA1   = _REG_BIT(RCC_AHB2RSTSETR_OFFSET, 0, RCC_AHB2RSTCLRR_OFFSET, 1),
	RST_DMA2   = _REG_BIT(RCC_AHB2RSTSETR_OFFSET, 1, RCC_AHB2RSTCLRR_OFFSET, 1),
	RST_DMAMUX = _REG_BIT(RCC_AHB2RSTSETR_OFFSET, 2, RCC_AHB2RSTCLRR_OFFSET, 1),
	RST_ADC    = _REG_BIT(RCC_AHB2RSTSETR_OFFSET, 5, RCC_AHB2RSTCLRR_OFFSET, 1),
	RST_USBO   = _REG_BIT(RCC_AHB2RSTSETR_OFFSET, 8, RCC_AHB2RSTCLRR_OFFSET, 1),
	RST_SDMMC3 = _REG_BIT(RCC_AHB2RSTSETR_OFFSET, 16, RCC_AHB2RSTCLRR_OFFSET, 1),

	/* AHB3 peripherals */
	RST_DCMI  = _REG_BIT(RCC_AHB3RSTSETR_OFFSET, 0, RCC_AHB3RSTCLRR_OFFSET, 1),
	RST_CRYP2 = _REG_BIT(RCC_AHB3RSTSETR_OFFSET, 4, RCC_AHB3RSTCLRR_OFFSET, 1),
	RST_HASH2 = _REG_BIT(RCC_AHB3RSTSETR_OFFSET, 5, RCC_AHB3RSTCLRR_OFFSET, 1),
	RST_RNG2  = _REG_BIT(RCC_AHB3RSTSETR_OFFSET, 6, RCC_AHB3RSTCLRR_OFFSET, 1),
	RST_CRC2  = _REG_BIT(RCC_AHB3RSTSETR_OFFSET, 7, RCC_AHB3RSTCLRR_OFFSET, 1),
	RST_HSEM  = _REG_BIT(RCC_AHB3RSTSETR_OFFSET, 11, RCC_AHB3RSTCLRR_OFFSET, 1),
	RST_IPCC  = _REG_BIT(RCC_AHB3RSTSETR_OFFSET, 12, RCC_AHB3RSTCLRR_OFFSET, 1),

	/* AHB4 peripherals */
	RST_GPIOA = _REG_BIT(RCC_AHB4RSTSETR_OFFSET, 0, RCC_AHB4RSTCLRR_OFFSET, 1),
	RST_GPIOB = _REG_BIT(RCC_AHB4RSTSETR_OFFSET, 1, RCC_AHB4RSTCLRR_OFFSET, 1),
	RST_GPIOC = _REG_BIT(RCC_AHB4RSTSETR_OFFSET, 2, RCC_AHB4RSTCLRR_OFFSET, 1),
	RST_GPIOD = _REG_BIT(RCC_AHB4RSTSETR_OFFSET, 3, RCC_AHB4RSTCLRR_OFFSET, 1),
	RST_GPIOE = _REG_BIT(RCC_AHB4RSTSETR_OFFSET, 4, RCC_AHB4RSTCLRR_OFFSET, 1),
	RST_GPIOF = _REG_BIT(RCC_AHB4RSTSETR_OFFSET, 5, RCC_AHB4RSTCLRR_OFFSET, 1),
	RST_GPIOG = _REG_BIT(RCC_AHB4RSTSETR_OFFSET, 6, RCC_AHB4RSTCLRR_OFFSET, 1),
	RST_GPIOH = _REG_BIT(RCC_AHB4RSTSETR_OFFSET, 7, RCC_AHB4RSTCLRR_OFFSET, 1),
	RST_GPIOI = _REG_BIT(RCC_AHB4RSTSETR_OFFSET, 8, RCC_AHB4RSTCLRR_OFFSET, 1),
	RST_GPIOJ = _REG_BIT(RCC_AHB4RSTSETR_OFFSET, 9, RCC_AHB4RSTCLRR_OFFSET, 1),
	RST_GPIOK = _REG_BIT(RCC_AHB4RSTSETR_OFFSET, 10, RCC_AHB4RSTCLRR_OFFSET, 1),

	/* APB4 peripherals */
	RST_LTDC     = _REG_BIT(RCC_APB4RSTSETR_OFFSET, 0, RCC_APB4RSTCLRR_OFFSET, 1),
	RST_DSI      = _REG_BIT(RCC_APB4RSTSETR_OFFSET, 4, RCC_APB4RSTCLRR_OFFSET, 1),
	RST_DDRPERFM = _REG_BIT(RCC_APB4RSTSETR_OFFSET, 8, RCC_APB4RSTCLRR_OFFSET, 1),
	RST_USBPHY   = _REG_BIT(RCC_APB4RSTSETR_OFFSET, 16, RCC_APB4RSTCLRR_OFFSET, 1),

	/* APB5 peripherals */
	RST_SPI6   = _REG_BIT(RCC_APB5RSTSETR_OFFSET, 0, RCC_APB5RSTCLRR_OFFSET, 1),
	RST_I2C4   = _REG_BIT(RCC_APB5RSTSETR_OFFSET, 2, RCC_APB5RSTCLRR_OFFSET, 1),
	RST_I2C6   = _REG_BIT(RCC_APB5RSTSETR_OFFSET, 3, RCC_APB5RSTCLRR_OFFSET, 1),
	RST_USART1 = _REG_BIT(RCC_APB5RSTSETR_OFFSET, 4, RCC_APB5RSTCLRR_OFFSET, 1),
	RST_STGEN  = _REG_BIT(RCC_APB5RSTSETR_OFFSET, 20, RCC_APB5RSTCLRR_OFFSET, 1),

	/* AHB5 peripherals */
	RST_GPIOZ   = _REG_BIT(RCC_AHB5RSTSETR_OFFSET, 0, RCC_AHB5RSTCLRR_OFFSET, 1),
	RST_CRYP1   = _REG_BIT(RCC_AHB5RSTSETR_OFFSET, 4, RCC_AHB5RSTCLRR_OFFSET, 1),
	RST_HASH1   = _REG_BIT(RCC_AHB5RSTSETR_OFFSET, 5, RCC_AHB5RSTCLRR_OFFSET, 1),
	RST_RNG1    = _REG_BIT(RCC_AHB5RSTSETR_OFFSET, 6, RCC_AHB5RSTCLRR_OFFSET, 1),
	RST_BKPSRAM = _REG_BIT(RCC_AHB5RSTSETR_OFFSET, 8, RCC_AHB5RSTCLRR_OFFSET, 1),

	/* AHB6 peripherals */
	RST_GPU    = _REG_BIT(RCC_AHB6RSTSETR_OFFSET, 5, RCC_AHB6RSTCLRR_OFFSET, 1),
	RST_ETHMAC = _REG_BIT(RCC_AHB6RSTSETR_OFFSET, 10, RCC_AHB6RSTCLRR_OFFSET, 1),
	RST_FMC    = _REG_BIT(RCC_AHB6RSTSETR_OFFSET, 12, RCC_AHB6RSTCLRR_OFFSET, 1),
	RST_QSPI   = _REG_BIT(RCC_AHB6RSTSETR_OFFSET, 14, RCC_AHB6RSTCLRR_OFFSET, 1),
	RST_SDMMC1 = _REG_BIT(RCC_AHB6RSTSETR_OFFSET, 16, RCC_AHB6RSTCLRR_OFFSET, 1),
	RST_SDMMC2 = _REG_BIT(RCC_AHB6RSTSETR_OFFSET, 17, RCC_AHB6RSTCLRR_OFFSET, 1),
	RST_CRC1   = _REG_BIT(RCC_AHB6RSTSETR_OFFSET, 20, RCC_AHB6RSTCLRR_OFFSET, 1),
	RST_USBH   = _REG_BIT(RCC_AHB6RSTSETR_OFFSET, 24, RCC_AHB6RSTCLRR_OFFSET, 1),
};
/**@}*/

#undef RCC_OFFSET_MASK
#undef RCC_BASE_LEN
#undef RCC_BIT_POS_LEN
#undef RCC_BIT_POS_MASK
#undef _REG_BIT

#include <libopencm3/stm32/common/rcc_common_all.h>

/** @defgroup rcc_file RCC peripheral API
 *
 * @ingroup peripheral_apis
 * @{
 */
BEGIN_DECLS
/**
 * Set the clock select for the SPI 4/5 devices.
 * @param[in] clksel  Clock source to configure for. @ref rcc_d2ccip1r_values
 * @sa rcc_set_peripheral_clk_sel for equivalent generic functionality
 */
void rcc_set_spi45_clksel(uint8_t clksel);

END_DECLS
/**@}*/

#endif
